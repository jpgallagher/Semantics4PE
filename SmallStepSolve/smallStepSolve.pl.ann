:-module(smallStepSolve,_).
logen(run/1,run([])).
logen(run/1,run([A])) :-
    logen(unfold,bigStepPred(A)),
    logen(memo,smallStep(A,B)),
    logen(memo,run(B)).
logen(smallStep/2,smallStep(A,[])) :-
    logen(unfold,leaf(A)),
    logen(unfold,clpClause(_,A,B)),
    logen(unfold,callPreds(B)).
logen(smallStep/2,smallStep(bigstep(B,C,D),A)) :-
    logen(unfold,nonLeaf(bigstep(B,C,D))),
    logen(unfold,clpClause(E,bigstep(B,C,D),[F|G])),
    logen(unfold,nextStep(F,E,G,A)).
logen(nextStep/4,nextStep(A,_,B,B)) :-
    logen(memo,leaf(A)),
    logen(memo,smallStep(A,[])).
logen(nextStep/4,nextStep(bigstep(C,D,E),A,B,[F])) :-
    logen(memo,nonLeaf(bigstep(C,D,E))),
    logen(memo,smallStep(bigstep(C,D,E),[bigstep(U,V,W)])),
    logen(unfold,tryFold(A,F,[bigstep(U,V,W)|B])).
logen(tryFold/3,tryFold(_,A,[A])).
logen(tryFold/3,tryFold(A,B,[C|D])) :-
    logen(call,D\==[]),
    logen(unfold,clpClause(A,B,[C|D])).
logen(evalConditions/2,evalConditions([],[])).
logen(evalConditions/2,evalConditions([A|B],[A|B])) :-
    logen(unfold,bigStepPred(A)).
logen(evalConditions/2,evalConditions([B|C],A)) :-
    logen(unfold,otherPred(B)),
    logen(memo,eval(B)),
    logen(unfold,evalConditions(C,A)).
logen(callPred/1,eval(A)) :-
    logen(unfold,constraint(A)),
    logen(rescall,call(A)).
logen(callPred/1,eval(A)) :-
    logen(unfold,clpClause(_,A,B)),
    logen(unfold,callPreds(B)).
logen(callPreds/1,callPreds([])).
logen(callPreds/1,callPreds([A|B])) :-
    logen(memo,eval(A)),
    logen(unfold,callPreds(B)).
logen(bigStepPred/1,bigStepPred(bigstep(_,_,_))).
logen(bigStepPred/1,bigStepPred(controlExpr(_,_,_,_))).
logen(otherPred/1,otherPred(A)) :-
    logen(call,functor(A,B,C)),
    logen(call,member(B/C,[eval/4,find/3,gt/3,lt/3,gte/3,lte/3,eq/3,negate/2,save/4])).
logen(otherPred/1,otherPred(A)) :-
    logen(unfold,constraint(A)).
logen(leaf/1,leaf(bigstep(skip,_,_))).
logen(leaf/1,leaf(bigstep(asg(_,_),_,_))).
logen(leaf/1,leaf(controlExpr(_,_,_,_))).
logen(nonLeaf/1,nonLeaf(bigstep(seq(_,_),_,_))).
logen(nonLeaf/1,nonLeaf(bigstep(ifthenelse(_,_,_),_,_))).
logen(nonLeaf/1,nonLeaf(bigstep(while(_,_),_,_))).
logen(nonLeaf/1,nonLeaf(bigstep(for(_,_,_,_),_,_))).
logen(constraint/1,constraint(_=_)).
logen(constraint/1,constraint(_<_)).
logen(constraint/1,constraint(_>_)).
logen(constraint/1,constraint(_=<_)).
logen(constraint/1,constraint(_>=_)).
logen(constraint/1,constraint(_ is _)).
logen(constraint/1,constraint(_=:=_)).
logen(constraint/1,constraint(_\==_)).
logen(constraint/1,constraint(_\=_)).
logen(clpClause/3,clpClause(1,eval(var(C),A,A,B),[find(A,C,B)])).
logen(clpClause/3,clpClause(2,eval(cns(nat(B)),A,A,B),[])).
logen(clpClause/3,clpClause(3,eval(add(D,E),A,B,C),[eval(D,A,F,G),eval(E,F,B,H),C=G+H])).
logen(clpClause/3,clpClause(4,eval(sub(D,E),A,B,C),[eval(D,A,F,G),eval(E,F,B,H),C=G-H])).
logen(clpClause/3,clpClause(5,eval(mul(D,E),A,B,C),[eval(D,A,F,G),eval(E,F,B,H),C=G*H])).
logen(clpClause/3,clpClause(6,eval(div(D,E),A,B,C),[eval(D,A,F,G),eval(E,F,B,H),C=G/H])).
logen(clpClause/3,clpClause(7,controlExpr(D>E,A,B,C),[eval(D,A,F,G),eval(E,F,B,H),gt(G,H,C)])).
logen(clpClause/3,clpClause(8,controlExpr(D<E,A,B,C),[eval(D,A,F,G),eval(E,F,B,H),lt(G,H,C)])).
logen(clpClause/3,clpClause(9,controlExpr(D>=E,A,B,C),[eval(D,A,F,G),eval(E,F,B,H),gte(G,H,C)])).
logen(clpClause/3,clpClause(10,controlExpr(D=<E,A,B,C),[eval(D,A,F,G),eval(E,F,B,H),lte(G,H,C)])).
logen(clpClause/3,clpClause(11,controlExpr(D==E,A,B,C),[eval(D,A,F,G),eval(E,F,B,H),eq(G,H,C)])).
logen(clpClause/3,clpClause(12,controlExpr(logicaland(D,E),A,B,C),[controlExpr(D,A,F,G),controlExpr(E,F,B,H),C is G/\H])).
logen(clpClause/3,clpClause(13,controlExpr(not(D),A,B,C),[controlExpr(D,A,B,E),negate(E,C)])).
logen(clpClause/3,clpClause(14,bigstep(skip,A,A),[])).
logen(clpClause/3,clpClause(15,bigstep(asg(var(D),C),A,B),[eval(C,A,E,F),save(D,F,E,B)])).
logen(clpClause/3,clpClause(16,bigstep(seq(C,D),A,B),[bigstep(C,A,E),bigstep(D,E,B)])).
logen(clpClause/3,clpClause(17,bigstep(ifthenelse(C,D,_),A,B),[controlExpr(C,A,E,1),bigstep(D,E,B)])).
logen(clpClause/3,clpClause(18,bigstep(ifthenelse(C,_,D),A,B),[controlExpr(C,A,E,0),bigstep(D,E,B)])).
logen(clpClause/3,clpClause(19,bigstep(while(C,D),A,B),[bigstep(ifthenelse(C,seq(D,while(C,D)),skip),A,B)])).
logen(clpClause/3,clpClause(20,bigstep(for(C,D,E,F),A,B),[bigstep(C,A,G),bigstep(while(D,seq(F,E)),G,B)])).
logen(clpClause/3,clpClause(21,find([(A,B)|_],A,B),[])).
logen(clpClause/3,clpClause(22,find([(D,_)|C],A,B),[A\==D,find(C,A,B)])).
logen(clpClause/3,clpClause(23,save(A,B,[(A,_)|C],[(A,D)|C]),[D is B])).
logen(clpClause/3,clpClause(24,save(A,B,[(D,E)|C],[(D,E)|F]),[A\==D,save(A,B,C,F)])).
logen(clpClause/3,clpClause(25,save(A,B,[],[(A,C)]),[C is B])).
logen(clpClause/3,clpClause(26,gt(A,B,1),[A>B])).
logen(clpClause/3,clpClause(27,gt(A,B,0),[A=<B])).
logen(clpClause/3,clpClause(28,lt(A,B,1),[A<B])).
logen(clpClause/3,clpClause(29,lt(A,B,0),[A>=B])).
logen(clpClause/3,clpClause(30,gte(A,B,1),[A>=B])).
logen(clpClause/3,clpClause(31,gte(A,B,0),[A<B])).
logen(clpClause/3,clpClause(32,lte(A,B,1),[A=<B])).
logen(clpClause/3,clpClause(33,lte(A,B,0),[A>B])).
logen(clpClause/3,clpClause(34,eq(A,B,1),[A==B])).
logen(clpClause/3,clpClause(35,eq(A,B,0),[A\==B])).
logen(clpClause/3,clpClause(36,negate(true,false),[])).
logen(clpClause/3,clpClause(37,negate(false,true),[])).
logen(test/1,test(A)) :-
    logen(unfold,exCode(B)),
    logen(unfold,run([bigstep(B,[(x,5),(y,2),(z,3)],A)])).
logen(exCode/1,exCode(while(var(x)>cns(nat(0)),asg(var(x),sub(var(x),cns(nat(1))))))).


:- filter
    run(dynamic).
:- filter
    smallStep(nonvar,dynamic).
:- filter
    eval(nonvar).
:- filter
    leaf(dynamic).
:- filter
    nonLeaf(dynamic).